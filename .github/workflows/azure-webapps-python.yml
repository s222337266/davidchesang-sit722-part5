# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.

name: Build and deploy Python app to Azure Web App

env:
  AZURE_WEBAPP_NAME: bookapp  
  PYTHON_VERSION: '3.8' 
  VERSION: 1
  REGISTRY_NAME: bookapps222337266.azurecr.io  
  RESOURCE_GROUP: davidrg1
  AKS_CLUSTER_NAME: bookapp
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
        # Set up Terraform CLI
      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1

      # Authenticate to Azure
      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Terraform init to initialize the configuration
      - name: 'Terraform Init'
        run: |
          pwd
          ls -l
          terraform init
    
      # Terraform plan to show what resources will be created
      - name: 'Terraform Plan'
        run: terraform plan

      # Terraform apply to create resources
      - name: 'Terraform Apply'
        run: terraform apply -auto-approve

      - name: Get Container Registry URL
        id: acr_output
        run: |
          echo "$(terraform output -raw acr_login_server)"
          # Fetch the outputs as JSON
          OUTPUTS=$(terraform output -json)

          # Extract values using jq
          CONTAINER_REGISTRY=$(echo "${OUTPUTS}" | jq -r '.acr_login_server.value')
          REGISTRY_UN=$(echo "${OUTPUTS}" | jq -r '.acr_admin_username.value')
          REGISTRY_PW=$(echo "${OUTPUTS}" | jq -r '.acr_admin_password.value')

          # Write to GITHUB_ENV
          echo "CONTAINER_REGISTRY=${CONTAINER_REGISTRY}" >> $GITHUB_ENV
          echo "REGISTRY_UN=${REGISTRY_UN}" >> $GITHUB_ENV
          echo "REGISTRY_PW=${REGISTRY_PW}" >> $GITHUB_ENV
        
  build:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker images
      run: |
        ./scripts/build-image.sh
        ./scripts/push-image.sh
        
  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Kubernetes
      run: |
        ./scripts/deploy.sh
